// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`beautifies context 1`] = `
Object {
  "code": 0,
  "stderr": "Fetching source code...
Beautifying source code...
",
  "stdout": "(function() {
    const o = document.title;
    console.log(\`\\\\t\`, o);
                      ^
    window.杨 = o;
})();
",
}
`;

exports[`context options 1`] = `
Object {
  "code": 0,
  "stderr": "Fetching source code...
Beautifying source code...
",
  "stdout": "    const o = document.title;
    console.log(\`\\\\t\`, o);
                      ^
    window.杨 = o;
",
}
`;

exports[`context options 2`] = `
Object {
  "code": 0,
  "stderr": "Fetching source code...
Beautifying source code...
",
  "stdout": "    console.log(\`\\\\t\`, o);
                      ^
",
}
`;

exports[`context options 3`] = `
Object {
  "code": 0,
  "stderr": "Fetching source code...
Beautifying source code...
",
  "stdout": "(function() {
    const o = document.title;
    console.log(\`\\\\t\`, o);
                      ^
",
}
`;

exports[`context options 4`] = `
Object {
  "code": 0,
  "stderr": "Fetching source code...
Beautifying source code...
",
  "stdout": "    console.log(\`\\\\t\`, o);
                      ^
    window.杨 = o;
})();
",
}
`;

exports[`fails if no argument is given 1`] = `
Object {
  "code": 0,
  "stderr": "",
  "stdout": "Usage: in-situ [options] <URL:LINE:COLUMN>

Download, beautify and print lines from a minified JavaScript source

Options:
  -A, --after-context <num>   print <num> lines of trailing context after the selected line
  -B, --before-context <num>  print <num> lines of leading context before the selected line
  -C, --context <num>         print <num> lines of leading and trailing context surrounding the selected line
  --no-source-map             don't try to use a source map
  -d, --debug                 output extra debugging
  -V, --version               output the version number
  -h, --help                  output usage information
",
}
`;

exports[`source map retrieval fallback to beautify if the source map is not found 1`] = `
Object {
  "code": 0,
  "stderr": "Fetching source code...
Fetching source maps...
Failed to fetch source map: Error: Failed to fetch: Not found
Beautifying source code...
",
  "stdout": "(function() {
    const o = document.title;
    console.log(\`\\\\t\`, o);
    window.杨 = o;
                ^
})();
",
}
`;

exports[`source map retrieval no source map option 1`] = `
Object {
  "code": 0,
  "stderr": "Fetching source code...
Beautifying source code...
",
  "stdout": "(function() {
    const o = document.title;
    console.log(\`\\\\t\`, o);
    window.杨 = o;
                ^
})();
",
}
`;

exports[`source map retrieval use the source map from a SourceMap header 1`] = `
Object {
  "code": 0,
  "stderr": "Fetching source code...
Fetching source maps...
",
  "stdout": "File: index.js
const title = document.title
console.log(\`	\`, title)
window.杨 = title
            ^

",
}
`;

exports[`source map retrieval use the source map from a X-SourceMap header 1`] = `
Object {
  "code": 0,
  "stderr": "Fetching source code...
Fetching source maps...
",
  "stdout": "File: index.js
const title = document.title
console.log(\`	\`, title)
window.杨 = title
            ^

",
}
`;

exports[`source map retrieval use the source map from a data-uri 1`] = `
Object {
  "code": 0,
  "stderr": "Fetching source code...
",
  "stdout": "File: index.js
const title = document.title
console.log(\`	\`, title)
window.杨 = title
            ^

",
}
`;

exports[`source map retrieval use the source map from a sourcemap comment 1`] = `
Object {
  "code": 0,
  "stderr": "Fetching source code...
Fetching source maps...
",
  "stdout": "File: index.js
const title = document.title
console.log(\`	\`, title)
window.杨 = title
            ^

",
}
`;
